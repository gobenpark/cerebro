// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	container "github.com/gobenpark/trader/container"
	event "github.com/gobenpark/trader/event"
	order "github.com/gobenpark/trader/order"
	position "github.com/gobenpark/trader/position"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetStockCodes mocks base method
func (m *MockStore) GetStockCodes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetStockCodes")
}

// GetStockCodes indicates an expected call of GetStockCodes
func (mr *MockStoreMockRecorder) GetStockCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockCodes", reflect.TypeOf((*MockStore)(nil).GetStockCodes))
}

// Order mocks base method
func (m *MockStore) Order(ctx context.Context, o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockStoreMockRecorder) Order(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockStore)(nil).Order), ctx, o)
}

// Cancel mocks base method
func (m *MockStore) Cancel(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockStoreMockRecorder) Cancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockStore)(nil).Cancel), id)
}

// LoadHistory mocks base method
func (m *MockStore) LoadHistory(ctx context.Context, code string, d time.Duration) ([]container.Candle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHistory", ctx, code, d)
	ret0, _ := ret[0].([]container.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadHistory indicates an expected call of LoadHistory
func (mr *MockStoreMockRecorder) LoadHistory(ctx, code, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHistory", reflect.TypeOf((*MockStore)(nil).LoadHistory), ctx, code, d)
}

// LoadTick mocks base method
func (m *MockStore) LoadTick(ctx context.Context, code string) (<-chan container.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTick", ctx, code)
	ret0, _ := ret[0].(<-chan container.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTick indicates an expected call of LoadTick
func (mr *MockStoreMockRecorder) LoadTick(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTick", reflect.TypeOf((*MockStore)(nil).LoadTick), ctx, code)
}

// Uid mocks base method
func (m *MockStore) Uid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uid")
	ret0, _ := ret[0].(string)
	return ret0
}

// Uid indicates an expected call of Uid
func (mr *MockStoreMockRecorder) Uid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uid", reflect.TypeOf((*MockStore)(nil).Uid))
}

// Cash mocks base method
func (m *MockStore) Cash() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cash")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Cash indicates an expected call of Cash
func (mr *MockStoreMockRecorder) Cash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cash", reflect.TypeOf((*MockStore)(nil).Cash))
}

// Commission mocks base method
func (m *MockStore) Commission() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commission")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Commission indicates an expected call of Commission
func (mr *MockStoreMockRecorder) Commission() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commission", reflect.TypeOf((*MockStore)(nil).Commission))
}

// Positions mocks base method
func (m *MockStore) Positions() []position.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Positions")
	ret0, _ := ret[0].([]position.Position)
	return ret0
}

// Positions indicates an expected call of Positions
func (mr *MockStoreMockRecorder) Positions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Positions", reflect.TypeOf((*MockStore)(nil).Positions))
}

// OrderState mocks base method
func (m *MockStore) OrderState(ctx context.Context) (<-chan event.OrderEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderState", ctx)
	ret0, _ := ret[0].(<-chan event.OrderEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderState indicates an expected call of OrderState
func (mr *MockStoreMockRecorder) OrderState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderState", reflect.TypeOf((*MockStore)(nil).OrderState), ctx)
}

// OrderInfo mocks base method
func (m *MockStore) OrderInfo(id string) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderInfo", id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderInfo indicates an expected call of OrderInfo
func (mr *MockStoreMockRecorder) OrderInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderInfo", reflect.TypeOf((*MockStore)(nil).OrderInfo), id)
}
